启动：
net sart mysql
连接：
mysql -u root -p 密码 -h 主机名

SQL关键字不区分大小写

SQL类型：
1.查询语句
2.数据操作语句DML(insert,update,delete)　操作表里的数据
2.数据定义语句DDL(create,alter,drop,truncate)　主要操作数据表

数据库可以存储的对象：
1.表             table
2.数据字典                      就是系统表，存放数据库相关信息的表，由系统维护
3.约束            constraint    进行数据校验，保证数据完整性的规则
4.视图            view          表里数据的逻辑显示，不存储数据
5.索引            index         提高查询的性能


1.创建表语句
create table java (name varchar(10),age int default  0,address text,price float);

注意：varchar后面要指定长度，否则会报错

2.查看表的结构
desc 表名
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(10) | YES  |     | NULL    |       |
| age     | int(11)     | YES  |     | 0       |       |
| address | text        | YES  |     | NULL    |       |
| price   | float       | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+

子查询建表
create table android as select * from java;

给表增加一列
alter java add gender int;

增加两列
alter table java add (size varchar(10) ,color float);

删除一项
alter table java drop size;

删除多项

alter table java drop color,drop gender;

修改字段定义
alter table java modify color varchar(10);

更改表名
alter table java rename java2;

修改字段名称
alter table java change age age2 int;

更改字段类型和默认值
alter table java modify size varchar(20) default '3.4';


change和modify相比，可以改变列名

查看所有数据库
show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+

MySQL使用information_schema数据库中的TABLES表来保存所有的数据表，采用下面的命令可以查看
show tables;
desc TABLES;
select TABLE_NAME from TABLES where TABLE_NAME = 'java';
+------------+
| TABLE_NAME |
+------------+
| java       |
+------------+

删除表
 drop table android;

采用insert语句插入数据之后才能使用select语句查出数据，


truncate 表名(清除表的数据，保留表的结构)，速度比较快，一次删除整个表的结构
 delete:删除指定的数据，

约束
NOT NULL
UNIQUE  指定某列或者列的组合不能重复
PRIMARY KEY
FOREIGN KEY
CHECK

可以在建表时指定非空约束，也能在修改表结构是改变非空约束
create table android (score int not null,level varchar(10) default 'xyx' not null);

UNIQUE
//使用列级约束建立索引
create table android score int(12) not null,level varchar(22) unique;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| score | int(12)     | NO   |     | NULL    |       |
| level | varchar(22) | YES  | UNI | NULL    |       |
+-------+-------------+------+-----+---------+-------+

我们可以看到level字段的Key为UNI,此时level的值就不能重复了

create table android (score int not null,
//使用表级约束建立唯一索引
level varchar(22),unique (score),
//指定约束名
constraint uq unique(level));

+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| score | int(11)     | NO   | PRI | NULL    |       |
| level | varchar(22) | YES  | UNI | NULL    |       |
+-------+-------------+------+-----+---------+-------+
android表要求两个字段分别都不能重复，
Duplicate entry '2' for key 'score'

create table android2 (score int not null,level varchar(12),constraint dq unique(score,level));
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| score | int(11)     | NO   | MUL | NULL    |       |
| level | varchar(12) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
android2表要求两个字段的组合不能出现重复值，否则提示
Duplicate entry '1-3' for key 'dq'

可以在修改表结构时添加约束
//删除andnroid表上的索引uq
alter table android drop index uq;

如果需要对多列建组合约束，或者为唯一的约束指定约束名，就只能用表级约束语法

PRIMARY KEY
相当于非空和唯一约束，只能有一个主键，能唯一确定表的记录的字段
create table android (score int(12) primary key,level varchar(22));
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| score | int(12)     | NO   | PRI | NULL    |       |
| level | varchar(22) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

更改字段为primary key
 alter table java modify name varchar(22) primary key;

建表是为主键指定名称，在MySQL中没用，主键约束名依然是PRIMARY KEY(表级约束语法)
create table android2(score int,age varchar(22),constraint pm primary key(score,age));

+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| score | int(11)     | NO   | PRI | 0       |       |
| age   | varchar(22) | NO   | PRI |         |       |
+-------+-------------+------+-----+---------+-------+

表级约束(以多列建立组合主键)
create table android3 (age int(2),name varchar(22),primary key(age,name));

删除主键约束
alter table android2 drop primary key;

FOREIGN KEY
//建立teacher表
create table teacher(id int auto_increment,primary key,name varchar(22));
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int(11)     | NO   | PRI | NULL    | auto_increment |
| name  | varchar(22) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
//建立student表，
create table student(id int auto_increment primary key,name varchar(12),my_teacher int references teacher(id))
mysql> desc student;
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| id         | int(11)     | NO   | PRI | NULL    | auto_increment |
| name       | varchar(12) | YES  |     | NULL    |                |
| my_teacher | int(11)     | YES  |     | NULL    |                |
+------------+-------------+------+-----+---------+----------------+

列级约束语法在MySQL中并不生效，只是为了和标注SQL语句兼容
表级约束语法 foreign key(本表的外键列) references 主表名(参照到主表的哪个数据列)
 create table student (id int auto_increment primary key,name varchar(23),
 my_teacher int ,
 foreign key(my_teacher) references teacher(id));
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| id         | int(11)     | NO   | PRI | NULL    | auto_increment |
| name       | varchar(23) | YES  |     | NULL    |                |
| my_teacher | int(11)     | YES  | MUL | NULL    |                |
+------------+-------------+------+-----+---------+----------------+

指定外键名
 create table student2 (id int auto_increment primary key,name varchar(22),
 my_teacher int
 ,constraint st_fk foreign key(my_teacher) references teacher(id));

 删除外键
 alter table student2 drop foreign key st_fk;

添加外键约束      注意：外键和主键的字段类型要一致
alter table student2 add foreign key(name) references teacher(id);

当修改外键时，如果和主键有关联，会报下面的错
Cannot change column 'name': used in a foreign key constraint 'student2_ibfk_2'


索引(加速表的查询)
    创建索引：自动，手动
    删除索引：自动，手动

   语法：create　index 索引名 on 表名(字段名)
 create index score_idx on android(score);
删除
 drop index score_idx on android;

 视图
 create or replace view view_android as select * from android;
删除视图
drop view 视图名

同时插入多条数据
１.子查询插入
insert into student (my_teacher) select id from teacher;
values后面跟多个括号
insert into student (id,name) values (4,'a'),(5,'v');

更新
update student set name= 'cc' where my_teacher=1;
删除
delete from student where name ='a';

delete from 表名  删除表中的所有数据


Select语句用法
select id+5 from student desc;

连接(使用concat)
select concat(id,,'a') from student;


select默认会查出所有的记录，即使两行记录一样
select name from student;
+------+
| name |
+------+
| cc   |
| cc   |
| NULL |
| v    |
+------+
去除重复记录
select distinct name from student;
+------+
| name |
+------+
| cc   |
| NULL |
| v    |
+------+

SQL运算符：
两个值是否相等，用=号
不相等是<>
赋值运算符是:=

比较运算符
between v1 and v2 值在[v1,v2]之间
in(list) 等于括号的多个值
like 字符串匹配
is null  值是否为null

假如student表如下
+----+------+------------+
| id | name | my_teacher |
+----+------+------------+
|  1 | cc   |          1 |
|  2 | cc   |          1 |
|  3 | NULL |          2 |
|  5 | v    |       NULL |
+----+------+------------+

select id from student where id between 2 and 3;
+----+
| id |
+----+
|  2 |
|  3 |
+----+
select id from student where id in(3,5);
+----+
| id |
+----+
|  5 |
|  3 |
+----+
select name from student where name like 'v';
+------+
| name |
+------+
| v    |
+------+
 select * from student where name is null;
+----+------+------------+
| id | name | my_teacher |
+----+------+------------+
|  3 | NULL |          2 |
+----+------+------------+

like用于模糊查询，%代表任意多个字符，_代表一个字符

and查询两个条件
select * from student where name ='cc' and id =2;
not 不满足条件的   select * from student where not name like 'c%';
+----+------+------------+
| id | name | my_teacher |
+----+------+------------+
|  5 | v    |       NULL |
+----+------+------------+
or 满足任意一个1条件

my_teacher降序排列，当my_teacher相同时根据id升序排列
select * from student order by my_teacher desc,id;
+----+------+------------+
| id | name | my_teacher |
+----+------+------------+
|  3 | NULL |          2 |
|  1 | cc   |          1 |
|  2 | cc   |          1 |
|  5 | v    |       NULL |
+----+------+------------+

数据库函数
name字段的字符长度
select char_length(name) from student;
//计算1.5的sin值
select sin (1.5);

select DATE_ADD('2017-8-22',interval 2 MONTH);
+----------------------------------------+
| DATE_ADD('2017-8-22',interval 2 MONTH) |
+----------------------------------------+
| 2017-10-22                             |
+----------------------------------------+
增加天数
select ADDDATE('2017-8-22',3);
+------------------------+
| ADDDATE('2017-8-22',3) |
+------------------------+
| 2017-08-25             |
+------------------------+
当前日期
select CURDATE();
+------------+
| CURDATE()  |
+------------+
| 2017-08-22 |
+------------+
当前时间
select curtime();
+-----------+
| curtime() |
+-----------+
| 11:24:34  |
+-----------+
select md5('testing');
+----------------------------------+
| md5('testing')                   |
+----------------------------------+
| ae2b1fca515949e5d54fb22b8ed95575 |
+----------------------------------+

查看创建表的结构
show create table student;

| student | CREATE TABLE `student` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(23) DEFAULT NULL,
  `my_teacher` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `my_teacher` (`my_teacher`),
  CONSTRAINT `student_ibfk_1` FOREIGN KEY (`my_teacher`) REFERENCES `teacher` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1 |

更改表的默认编码(表的编码不代表字段的编码)
alter table student DEFAULT CHARACTER set utf8;
更改字段的编码
alter table student change name name varchar(23) CHARACTER set utf8;

select ifnull(name,'没有名字') from student;
如果字段的编码中不支持gbk，会报下面的错
ERROR 1267 (HY000): Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and
(gbk_chinese_ci,COERCIBLE) for operation 'ifnull'

ifnull(v1,v2) v1为null，返回v2,v2为null，返回v1
nullif(v1,v2)如果v1和v2相等，返回null，否则返回v1
if(v1,v2,v3)如果v1为true，且不为0和null，返回v2，否则返回v3

分组和组函数
平均值
select avg(id) from student;
表中记录总数
select count(*) from student;
id的总和
 select sum(id) from student;
 id最大的
select max(id) from student;

group by 对结果进行分组，通常跟一个或多个列名，表名查询结果根据咧分组
当一列或者多列值相同是，系统把这些记录当作一组

select count(*) from student group by name;
+----------+
| count(*) |
+----------+
|        1 |
|        2 |
|        1 |
+----------+

当id和my_teacher相等时，认为是一组
select count(*) from student group by id,my_teacher;

where和having区别
1.不能在where子句中过滤组，where只能用于过滤行，过滤组必须使用having
2.不能在where子句中使用组函数，having中可以使用
my_teacher记录大于1的
select * from student group by my_teacher having count(*) >1;
+----+------+------------+
| id | name | my_teacher |
+----+------+------------+
|  1 | cc   |          1 |
+----+------+------------+

多表连接查询和子查询

连接条件要求两列相等 等值连接，否则非等值连接
如果没有where条件,称为广义笛卡尔积


假如teacher表和student表如下
teacher
+----+--------------+
| id | teacher_name |
+----+--------------+
|  1 | a            |
|  2 | b            |
|  3 | cc           |
+----+--------------+
student
+----+------+------------+
| id | name | my_teacher |
+----+------+------------+
|  1 | cc   |          1 |
|  2 | cc   |          1 |
|  3 | NULL |          2 |
|  5 | v    |       NULL |
+----+------+------------+
//查询student表中的所有数据，以及teacher表中的teacher_name,这里给teacher起了别名t,
student别名s,条件是student表中的name值等于teacher表中的teacher_name
select s.*,teacher_name from student s,teacher t where s.name = teacher_name;

+----+------+------------+--------------+
| id | name | my_teacher | teacher_name |
+----+------+------------+--------------+
|  1 | cc   |          1 | cc           |
|  2 | cc   |          1 | cc           |
+----+------+------------+--------------+

广义笛卡尔积
select s.*,teacher_name from student s,teacher t;
一共十二条记录
非等值连接
select s.* ,teacher_name from student s,teacher t where s.id > t.id;


交叉连接，相当于广义笛卡尔积
select s.* from student s cross join teacher t;
自然连接，以两个表中同名列进行连接，如果没有同名列，则结果与交叉连接一样
假如有android和html两个表
android
+----+------+------+
| id | num  | name |
+----+------+------+
|  1 |   20 | a    |
|  2 |   21 | b    |
+----+------+------+
html
+----+-------+
| id | color |
+----+-------+
|  1 | red   |
|  2 | bla   |
|  3 | wh    |
+----+-------+
自然连接
select * from android natural join html;
+----+------+------+-------+
| id | num  | name | color |
+----+------+------+-------+
|  1 |   20 | a    | red   |
|  2 |   21 | b    | bla   |
+----+------+------+-------+
使用id连接
select * from android  join html using(id);
on实现非等值连接
select a.*,color from android a join html on a.id > html.id;
+----+------+------+-------+
| id | num  | name | color |
+----+------+------+-------+
|  2 |   21 | b    | red   |
+----+------+------+-------+

删除表的某一列
 alter table html drop column name;

左，右，全外连接
android表
+----+------+------+
| id | num  | name |
+----+------+------+
|  1 |   20 | a    |
|  2 |   21 | b    |
+----+------+------+
html表
+----+-------+
| id | color |
+----+-------+
|  1 | red   |
|  2 | bla   |
|  3 | wh    |
|  4 | b1    |
+----+-------+
左连接(返回左表的所有行，如果左表的记录在右表里没有，左表对应的记录为空)
select a.*,color from android a left join html h on a.id = h.id;
+----+------+------+-------+
| id | num  | name | color |
+----+------+------+-------+
|  1 |   20 | a    | red   |
|  2 |   21 | b    | bla   |
+----+------+------+-------+

右连接(返回右表的所有行，如果右表的记录在左表里没有，右表对应的记录为空)
select a.*,color from android a right join html h on a.id = h.id;

+------+------+------+-------+
| id   | num  | name | color |
+------+------+------+-------+
|    1 |   20 | a    | red   |
|    2 |   21 | b    | bla   |
| NULL | NULL | NULL | wh    |
| NULL | NULL | NULL | b1    |
+------+------+------+-------+

全外连接
显示符合条件的数据行，同时显示左右不符合条件的数据行，相应的左右两边显示NULL

子查询
可以出现在两个位置
1.出现在from后当作数据表
select * from (select * from html) h where h.id > 2;
2.出现在where条件后作为过滤的条件
select id from html where id > (select id from android );//返回单列值
//返回多列值，如果数据匹配，作为记录返回
select id from html where id in (select id from android );
下面连个可以匹配>.>=.<,<=,<>,=
any:任意一个
all:所有的
选出html表里id大于android中id的所有记录
select * from html where id > all(select id from android);